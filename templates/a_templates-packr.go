// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package templates

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes(".", "template.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCmltcG9ydCAoCgkiZm10IgoJImh0bWwvdGVtcGxhdGUiCgkic3RyaW5ncyIKCgkiZ2l0aHViLmNvbS9nb2J1ZmZhbG8vcGFja3IiCikKCmNvbnN0ICgKCXBhY2tyUGF0aCA9ICIuIgopCgp2YXIgRnVuY01hcCA9IHRlbXBsYXRlLkZ1bmNNYXB7CgkiaW5zZXJ0X2ZpZWxkcyI6ICAgICAgIEdldEluc2VydEZpZWxkcywKCSJpbnNlcnRfdmFsdWVzIjogICAgICAgR2V0SW5zZXJ0VmFsdWVzLAoJImluc2VydF9hcmdzIjogICAgICAgICBHZXRJbnNlcnRBcmdzLAoJInNjYW5fZmllbGRzIjogICAgICAgICBHZXRTY2FuRmllbGRzLAoJInVwZGF0ZV9hcmdzIjogICAgICAgICBHZXRVcGRhdGVBcmdzLAoJInVwZGF0ZV92YWx1ZXMiOiAgICAgICBHZXRVcGRhdGVWYWx1ZXMsCgkidXBzZXJ0X2ZpZWxkcyI6ICAgICAgIEdldFVwc2VydEZpZWxkcywKCSJ1cHNlcnRfdmFsdWVzIjogICAgICAgR2V0VXBzZXJ0VmFsdWVzLAoJInVwc2VydF9vbl9kdXBsaWNhdGUiOiBHZXRVcHNlcnRPbkR1cGxpY2F0ZSwKCSJ1cHNlcnRfYXJncyI6ICAgICAgICAgR2V0VXBzZXJ0QXJncywKfQoKLy8gQm94IHJldHVybnMgdGhlIHRlbXBsYXRlIHBhY2tlciBib3gKZnVuYyBCb3goKSBwYWNrci5Cb3ggewoJcmV0dXJuIHBhY2tyLk5ld0JveChwYWNrclBhdGgpCn0KCmZ1bmMgR2V0SW5zZXJ0RmllbGRzKGZpZWxkcyBbXUZpZWxkKSBzdHJpbmcgewoJdmFyIHBhcnRzIFtdc3RyaW5nCglmb3IgXywgZmwgOj0gcmFuZ2UgZmllbGRzIHsKCQlpZiBmbC5Db2x1bW5OYW1lID09ICJpZCIgewoJCQljb250aW51ZQoJCX0KCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgImAiK2ZsLkNvbHVtbk5hbWUrImAiKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRJbnNlcnRWYWx1ZXMoZmllbGRzIFtdRmllbGQpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSBmaWVsZHMgewoJCXN3aXRjaCBmbC5Db2x1bW5OYW1lIHsKCQljYXNlICJpZCI6CgkJCWNvbnRpbnVlCgkJY2FzZSAiY3JlYXRlZF9hdCI6CgkJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCAiTk9XKCkiKQoJCQljb250aW51ZQoJCWRlZmF1bHQ6CgkJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCAiPyIpCgkJfQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRJbnNlcnRBcmdzKHR0IFRhYmxlVGVtcGxhdGUpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSB0dC5UYWJsZS5GaWVsZHMgewoJCXN3aXRjaCBmbC5OYW1lIHsKCQljYXNlICJJRCIsICJDcmVhdGVkQXQiLCB0dC5UYWJsZS5QS05hbWU6CgkJCWNvbnRpbnVlCgkJfQoJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBmbXQuU3ByaW50ZigiJXMuJXMiLCB0dC5SZWNlaXZlck5hbWUsIGZsLk5hbWUpKQoJfQoJaWYgbGVuKHBhcnRzKSA+IDAgewoJCXJldHVybiAiLCAiICsgc3RyaW5ncy5Kb2luKHBhcnRzLCAiLCAiKQoJfQoJcmV0dXJuICIiCn0KCmZ1bmMgR2V0U2NhbkZpZWxkcyh0dCBUYWJsZVRlbXBsYXRlKSB0ZW1wbGF0ZS5IVE1MIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIF8sIGZsIDo9IHJhbmdlIHR0LlRhYmxlLkZpZWxkcyB7CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKCImJXMuJXMiLCB0dC5SZWNlaXZlck5hbWUsIGZsLk5hbWUpKQoJfQoJcmV0dXJuIHRlbXBsYXRlLkhUTUwoc3RyaW5ncy5Kb2luKHBhcnRzLCAiLCAiKSkKfQoKZnVuYyBHZXRVcGRhdGVBcmdzKHR0IFRhYmxlVGVtcGxhdGUpIHRlbXBsYXRlLkhUTUwgewoJdmFyIHBhcnRzIFtdc3RyaW5nCglmb3IgXywgZmwgOj0gcmFuZ2UgdHQuVGFibGUuRmllbGRzIHsKCQlzd2l0Y2ggZmwuTmFtZSB7CgkJY2FzZSAiSUQiLCAiQ3JlYXRlZEF0IiwgIlVwZGF0ZWRBdCI6CgkJCWNvbnRpbnVlCgkJfQoJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBmbXQuU3ByaW50ZigiJXMuJXMiLCB0dC5SZWNlaXZlck5hbWUsIGZsLk5hbWUpKQoJfQoJaWYgbGVuKHBhcnRzKSA+IDAgewoJCXJldHVybiB0ZW1wbGF0ZS5IVE1MKHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikgKyAiLCAiKQoJfQoJcmV0dXJuICIiCn0KCmZ1bmMgR2V0VXBkYXRlVmFsdWVzKHR0IFRhYmxlVGVtcGxhdGUpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSB0dC5UYWJsZS5GaWVsZHMgewoJCXN3aXRjaCBmbC5OYW1lIHsKCQljYXNlICJJRCIsICJDcmVhdGVkQXQiOgoJCQljb250aW51ZQoJCWNhc2UgIlVwZGF0ZWRBdCI6CgkJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBmbXQuU3ByaW50ZigiYCVzYD1VVENfVElNRVNUQU1QKCkiLCBmbC5Db2x1bW5OYW1lKSkKCQlkZWZhdWx0OgoJCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgZm10LlNwcmludGYoImAlc2A9PyIsIGZsLkNvbHVtbk5hbWUpKQoJCX0KCX0KCXJldHVybiBzdHJpbmdzLkpvaW4ocGFydHMsICIsICIpCn0KCmZ1bmMgR2V0VXBzZXJ0RmllbGRzKGZpZWxkcyBbXUZpZWxkKSBzdHJpbmcgewoJdmFyIHBhcnRzIFtdc3RyaW5nCglmb3IgXywgZmwgOj0gcmFuZ2UgZmllbGRzIHsKCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgImAiK2ZsLkNvbHVtbk5hbWUrImAiKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRVcHNlcnRWYWx1ZXMoZmllbGRzIFtdRmllbGQpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSBmaWVsZHMgewoJCXN3aXRjaCBmbC5Db2x1bW5OYW1lIHsKCQljYXNlICJjcmVhdGVkX2F0IjoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsICJOT1coKSIpCgkJCWNvbnRpbnVlCgkJZGVmYXVsdDoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsICI/IikKCQl9Cgl9CglyZXR1cm4gc3RyaW5ncy5Kb2luKHBhcnRzLCAiLCAiKQp9CgpmdW5jIEdldFVwc2VydE9uRHVwbGljYXRlKHR0IFRhYmxlVGVtcGxhdGUpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSB0dC5UYWJsZS5GaWVsZHMgewoJCXN3aXRjaCBmbC5OYW1lIHsKCQljYXNlICJDcmVhdGVkQXQiOgoJCQljb250aW51ZQoJCWNhc2UgIklEIjoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKCJgJXNgPUxBU1RfSU5TRVJUX0lEKGAlc2ApIiwgZmwuQ29sdW1uTmFtZSwgZmwuQ29sdW1uTmFtZSkpCgkJY2FzZSAiVXBkYXRlZEF0IjoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKCJgJXNgPVVUQ19USU1FU1RBTVAoKSIsIGZsLkNvbHVtbk5hbWUpKQoJCWRlZmF1bHQ6CgkJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBmbXQuU3ByaW50ZigiYCVzYD1WQUxVRVMoYCVzYCkiLCBmbC5Db2x1bW5OYW1lLCBmbC5Db2x1bW5OYW1lKSkKCQl9Cgl9CglyZXR1cm4gc3RyaW5ncy5Kb2luKHBhcnRzLCAiLCAiKQp9CgpmdW5jIEdldFVwc2VydEFyZ3ModHQgVGFibGVUZW1wbGF0ZSkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIF8sIGZsIDo9IHJhbmdlIHR0LlRhYmxlLkZpZWxkcyB7CgkJc3dpdGNoIGZsLk5hbWUgewoJCWNhc2UgIkNyZWF0ZWRBdCI6CgkJCWNvbnRpbnVlCgkJfQoJCXBhcnRzID0gYXBwZW5kKHBhcnRzLCBmbXQuU3ByaW50ZigiJXMuJXMiLCB0dC5SZWNlaXZlck5hbWUsIGZsLk5hbWUpKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQo=\"")
	packr.PackJSONBytes(".", "types.go", "\"cGFja2FnZSB0ZW1wbGF0ZXMKCi8vIFRtcGxTdHJ1Y3RzIGlzIGEgY29sbGVjdGlvbiBvbiBUbXBsU3RydWN0CnR5cGUgVG1wbFN0cnVjdHMgW11UbXBsU3RydWN0CgovLyBUbXBsU3RydWN0IGRlZmluZXMgdGhlIHRhYmxlIGRhdGEgdG8gcGFzcyB0byB0aGUgbW9kZWxzCnR5cGUgVG1wbFN0cnVjdCBzdHJ1Y3QgewoJTmFtZSAgICAgIHN0cmluZwoJVGFibGVOYW1lIHN0cmluZwoJRmllbGRzICAgIFtdVG1wbEZpZWxkCglJbXBvcnRzICAgbWFwW3N0cmluZ11zdHJ1Y3R7fQp9CgovLyBUbXBsRmllbGQgZGVmaW5lcyBhIHRhYmxlIGZpZWxkIHRlbXBsYXRlCnR5cGUgVG1wbEZpZWxkIHN0cnVjdCB7CglOYW1lICAgICAgIHN0cmluZwoJVHlwZSAgICAgICBzdHJpbmcKCUNvbHVtbk5hbWUgc3RyaW5nCglOdWxsYWJsZSAgIGJvb2wKfQoKLy8gU3RydWN0VG1wbERhdGEgZGVmaW5lcyB0aGUgdG9wIGxldmVsIHN0cnVjdCBkYXRhIHRvIHBhc3MgdG8gdGhlIG1vZGVscwp0eXBlIFN0cnVjdFRtcGxEYXRhIHN0cnVjdCB7CglNb2RlbCAgICAgICBUbXBsU3RydWN0CglSZWNlaXZlciAgICBzdHJpbmcKCVBhY2thZ2VOYW1lIHN0cmluZwp9CgovLyBUYWJsZVRlbXBsYXRlIGRlZmluZXMgdGhlIHRvcCBsZXZlbCB0ZW1wbGF0ZSBkYXRhCnR5cGUgVGFibGVUZW1wbGF0ZSBzdHJ1Y3QgewoJVGFibGUgICAgICAgIFRhYmxlCglSZWNlaXZlck5hbWUgc3RyaW5nCglQYWNrYWdlTmFtZSAgc3RyaW5nCn0KCi8vIFRhYmxlcyBpcyBhIHNpbGNlIG9mIFRhYmxlCnR5cGUgVGFibGVzIFtdVGFibGUKCi8vIFRhYmxlIGRlZmluZXMgdGhlIHRhYmxlCnR5cGUgVGFibGUgc3RydWN0IHsKCU5hbWUgICAgc3RyaW5nCglEQk5hbWUgIHN0cmluZwoJUEtOYW1lICBzdHJpbmcKCVBLVHlwZSAgc3RyaW5nCglGaWVsZHMgIFtdRmllbGQKCUltcG9ydHMgbWFwW3N0cmluZ11zdHJ1Y3R7fQp9CgovLyBGaWVsZCBkZWZpbmVzIGNvbHVtbiBpbiBhIHRhYmxlCnR5cGUgRmllbGQgc3RydWN0IHsKCU5hbWUgICAgICAgc3RyaW5nCglUeXBlICAgICAgIHN0cmluZwoJQ29sdW1uTmFtZSBzdHJpbmcKCU51bGxhYmxlICAgYm9vbAp9Cg==\"")
	packr.PackJSONBytes(".", "x_helpers.go.tmpl", "\"\"")
	packr.PackJSONBytes(".", "x_helpers_test.go.tmpl", "\"\"")
	packr.PackJSONBytes(".", "x_table.go.tmpl", "\"Ly8gQ29kZSBnZW5lcmF0ZWQgYnkgTFVTSCBtb2RlbGdlbi4gRE8gTk9UIEVESVQuCnBhY2thZ2Uge3sgLlBhY2thZ2VOYW1lIH19CgppbXBvcnQgKAoJImZtdCIKCXt7IHJhbmdlICRrLCAkdjo9IC5UYWJsZS5JbXBvcnRzIH19Cgkie3ska319IgoJe3stIGVuZCB9fQoKICAgICJnaXRodWIuY29tL0xVU0hEaWdpdGFsL21vZGVsZ2VuIgopCgpjb25zdCAoCiAgICB7ey5UYWJsZS5OYW1lfX1EQk5hbWUgPSAie3suVGFibGUuREJOYW1lfX0iCikKCi8vIHt7LlRhYmxlLk5hbWV9fSByZXByZXNlbnRzIGEgcm93IGluIHRoZSB7ey5UYWJsZS5EQk5hbWV9fSB0YWJsZQp0eXBlIHt7LlRhYmxlLk5hbWV9fSBzdHJ1Y3QgewogICAge3sgcmFuZ2UgJGssICR2Oj0gLlRhYmxlLkZpZWxkcyB9fQogICAgICAgIHt7ICR2Lk5hbWUgfX0ge3sgJHYuVHlwZSB9fSBganNvbjoie3skdi5Db2x1bW5OYW1lfX0iYAogICAge3stIGVuZCB9fQp9CgovLyBTY2Fue3suVGFibGUuTmFtZX19IHdpbGwgbWFwIGEgZGF0YWJhc2Ugcm93IHRvIGl0cyBtb2RlbCBzdHJ1Y3QKZnVuYyBTY2Fue3suVGFibGUuTmFtZX19KHNjYW5uZXIgbW9kZWxnZW4uU2Nhbm5lciwge3suUmVjZWl2ZXJOYW1lfX0gKnt7LlRhYmxlLk5hbWV9fSkgZXJyb3IgewogICAgcmV0dXJuIHNjYW5uZXIuU2Nhbih7eyAuIHwgc2Nhbl9maWVsZHN9fSkKfQoKLy8gSW5zZXJ0e3suVGFibGUuTmFtZX19IHdpbGwgaW5zZXJ0IGEgbmV3IHt7LlRhYmxlLk5hbWV9fSByb3cgaW4gdGhlIHt7LlRhYmxlLkRCTmFtZX19IHRhYmxlCmZ1bmMgSW5zZXJ0e3suVGFibGUuTmFtZX19KHF1IG1vZGVsZ2VuLlF1ZXJpZXIsIHt7LlJlY2VpdmVyTmFtZX19ICp7ey5UYWJsZS5OYW1lfX0pIChsYXN0SW5zZXJ0SUQgaW50NjQsIGVyciBlcnJvcikgewogICAgY29uc3Qgc3RtdCA9ICJJTlNFUlQgSU5UTyB7ey5UYWJsZS5EQk5hbWV9fSAoe3suVGFibGUuRmllbGRzIHwgaW5zZXJ0X2ZpZWxkc319KSBWQUxVRVMgKHt7LlRhYmxlLkZpZWxkcyB8IGluc2VydF92YWx1ZXN9fSkiCiAgICByZXMsIGVyciA6PSBxdS5FeGVjKHN0bXR7eyAuIHwgaW5zZXJ0X2FyZ3MgfX0pCiAgICBpZiBlcnIgIT0gbmlsIHsKICAgICAgICByZXR1cm4gMCwgZXJyCiAgICB9CiAgICByZXR1cm4gcmVzLkxhc3RJbnNlcnRJZCgpCn0KCi8vIEZpbmR7ey5UYWJsZS5OYW1lfX0gd2lsbCBmaW5kIGEgc2luZ2xlIHNpbmdsZSB7ey5UYWJsZS5OYW1lfX0gcm93IGluIHRoZSB7ey5UYWJsZS5EQk5hbWV9fSB0YWJsZSBiYXNlZCBvbiBpdHMgcHJpbWFyeSBrZXkKZnVuYyBGaW5ke3suVGFibGUuTmFtZX19KHF1IG1vZGVsZ2VuLlF1ZXJpZXIsIHt7LlRhYmxlLlBLTmFtZX19IHt7LlRhYmxlLlBLVHlwZX19KSAoKnt7LlRhYmxlLk5hbWV9fSwgZXJyb3IpIHsKICAgIGNvbnN0IHN0bXQgPSAiU0VMRUNUICogRlJPTSB7ey5UYWJsZS5EQk5hbWV9fSBXSEVSRSB7ey5UYWJsZS5QS05hbWV9fSA9ID8iCiAgICB2YXIgcm93ID0gcXUuUXVlcnlSb3coc3RtdCwge3suVGFibGUuUEtOYW1lfX0pCiAgICB2YXIge3suUmVjZWl2ZXJOYW1lfX0gPSAme3suVGFibGUuTmFtZX19e30KICAgIFNjYW57ey5UYWJsZS5OYW1lfX0ocm93LCB7ey5SZWNlaXZlck5hbWV9fSkKICAgIHJldHVybiB7ey5SZWNlaXZlck5hbWV9fSwgbmlsCn0KCi8vIExvYWR7ey5UYWJsZS5OYW1lfX0gd2lsbCBsb2FkIGFsbCBvciBhIHN1YnNldCBvZiB7ey5UYWJsZS5OYW1lfX0gcm93cyBmcm9tIHRoZSB7ey5UYWJsZS5EQk5hbWV9fSB0YWJsZQpmdW5jIExvYWR7ey5UYWJsZS5OYW1lfX0ocXUgbW9kZWxnZW4uUXVlcmllciwgbGltaXQsIG9mZnNldCBpbnQpIChzZXQgW117ey5UYWJsZS5OYW1lfX0sIGVyciBlcnJvcikgewogICAgY29uc3Qgc3RtdCA9ICJTRUxFQ1QgKiBGUk9NIHt7LlRhYmxlLkRCTmFtZX19IgogICAgaWYgbGltaXQgPT0gMCAmJiBvZmZzZXQgPiAwIHsKICAgICAgICBlcnIgPSBmbXQuRXJyb3JmKCJjYW5ub3QgcXVlcnkgd2l0aCBvZmZzZXQgYnV0IG5vIGxpbWl0IikKICAgICAgICByZXR1cm4KICAgIH0KICAgIHZhciBzYiBzdHJpbmdzLkJ1aWxkZXIKICAgIHNiLldyaXRlU3RyaW5nKHN0bXQpCgogICAgaWYgbGltaXQgPiAwIHsKICAgICAgICBzYi5Xcml0ZVN0cmluZyhmbXQuU3ByaW50ZigiIExJTUlUICVkIiwgbGltaXQpKQogICAgfQogICAgaWYgb2Zmc2V0ID4gMCB7CiAgICAgICAgc2IuV3JpdGVTdHJpbmcoZm10LlNwcmludGYoIiBPRkZTRVQgJWQiLCBvZmZzZXQpKQogICAgfQoKICAgIHJvd3MsIGVyciA6PSBxdS5RdWVyeShzYi5TdHJpbmcoKSkKICAgIGlmIGVyciAhPSBuaWwgewogICAgICAgIHJldHVybgogICAgfQogICAgZGVmZXIgcm93cy5DbG9zZSgpCgogICAgZm9yIHJvd3MuTmV4dCgpIHsKICAgICAgICB2YXIge3suUmVjZWl2ZXJOYW1lfX0ge3suVGFibGUuTmFtZX19CiAgICAgICAgaWYgZXJyID0gU2Nhbnt7LlRhYmxlLk5hbWV9fShyb3dzLCAme3suUmVjZWl2ZXJOYW1lfX0pOyBlcnIgIT0gbmlsIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIHNldCA9IGFwcGVuZChzZXQsIHt7LlJlY2VpdmVyTmFtZX19KQogICAgfQoKICAgIHJldHVybgp9CgovLyBEZWxldGV7ey5UYWJsZS5OYW1lfX0gYW4gZXhpc3Rpbmcge3suVGFibGUuTmFtZX19IHJvdyBmcm9tIHRoZSB7ey5UYWJsZS5EQk5hbWV9fSB0YWJsZQpmdW5jIERlbGV0ZXt7LlRhYmxlLk5hbWV9fShxdSBtb2RlbGdlbi5RdWVyaWVyLCBpZCBpbnQ2NCkgKHJvd3NBZmZlY3RlZCBpbnQ2NCwgZXJyIGVycm9yKSB7CiAgICBjb25zdCBzdG10ID0gIkRFTEVURSBGUk9NIHt7LlRhYmxlLkRCTmFtZX19IFdIRVJFIGlkID0gPyIKICAgIHJlc3VsdCwgZXJyIDo9IHF1LkV4ZWMoc3RtdCwgaWQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4KCX0KCXJldHVybiByZXN1bHQuUm93c0FmZmVjdGVkKCkKfQoKLy8gQ291bnR7ey5UYWJsZS5OYW1lfX0gd2lsbCBjb2ludCB0aGUgbnVtYmVyIG9mIHJvd3MgZnJvbSB0aGUge3suVGFibGUuREJOYW1lfX0gdGFibGUKZnVuYyBDb3VudHt7LlRhYmxlLk5hbWV9fShxdSBtb2RlbGdlbi5RdWVyaWVyKSAoY291bnQgaW50NjQsIGVyciBlcnJvcikgewogICAgY29uc3Qgc3RtdCA9ICJTRUxFQ1QgQ09VTlQoKikgRlJPTSB7ey5UYWJsZS5EQk5hbWV9fSIKICAgIHJvdyA6PSBxdS5RdWVyeVJvdyhzdG10KQogICAgaWYgZXJyID0gcm93LlNjYW4oJmNvdW50KTsgZXJyICE9IG5pbCB7CiAgICAgICAgcmV0dXJuCiAgICB9CiAgICByZXR1cm4KfQoKLy8ge3suVGFibGUuTmFtZX19RXhpc3RzIGNoZWNrcyBmb3IgdGhlIGl0ZW1zIGV4aXN0ZW5jZSBpbiB0aGUgZGF0YWJhc2UsIGJhc2VkIG9uIGl0J3Mge3suVGFibGUuUEtOYW1lfX0KZnVuYyB7ey5UYWJsZS5OYW1lfX1FeGlzdHMocXUgbW9kZWxnZW4uUXVlcmllciwge3suVGFibGUuUEtOYW1lfX0ge3suVGFibGUuUEtUeXBlfX0pIChleGlzdHMgYm9vbCwgZXJyIGVycm9yKSB7CiAgICBjb25zdCBzdG10ID0gIlNFTEVDVCBFWElTVFMoU0VMRUNUIDEgRlJPTSB7ey5UYWJsZS5EQk5hbWV9fSBXSEVSRSB7ey5UYWJsZS5QS05hbWV9fSA9ID8gTElNSVQgMSkgQVMgYGV4aXN0c2AiCiAgICB2YXIgY291bnQgaW50CiAgICByb3cgOj0gcXUuUXVlcnlSb3coc3RtdCwgaWQpCiAgICBpZiBlcnIgPSByb3cuU2NhbigmY291bnQpOyBlcnIgIT0gbmlsIHsKICAgICAgICByZXR1cm4KICAgIH0KICAgIHJldHVybiBjb3VudCA+IDAsIG5pbAp9Cg==\"")
}
